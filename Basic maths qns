//count the digits that divide a number
class Solution {
public:
    int countDigits(int num) {
        int cnt = 0;
        int temp = num;
        while (temp > 0) {
            int lastDigit = temp % 10; 
            if (lastDigit != 0 && num % lastDigit == 0) { 
                cnt++;
            }
            temp = temp / 10; 
        }
        return cnt;
    }
};

//reverse integer
#include<iostream>
using namespace std;

class Solution {
public:
    int reverse(int x) {
        int revNum = 0;
        while (x != 0) {  // Works for negative numbers too
            int ld = x % 10;
            
            // Check for overflow before updating revNum
            if (revNum > INT_MAX / 10 || (revNum == INT_MAX / 10 && ld > 7)) return 0;
            if (revNum < INT_MIN / 10 || (revNum == INT_MIN / 10 && ld < -8)) return 0;
            
            revNum = (revNum * 10) + ld;
            x /= 10;
        }
        return revNum;
    }
};


//palindrome number
class Solution {
public:
    bool isPalindrome(int x) {
        if (x < 0) return false; // Negative numbers are not palindromes

        string num = to_string(x); // Convert to string
        string revNum = num; 
        reverse(revNum.begin(), revNum.end()); // Reverse the string

        return num == revNum; // Compare original with reversed
    }
};

//print all divisors of a given number
                                
#include <bits/stdc++.h> 
using namespace std;

int* printDivisors(int n, int &size) {
    // Allocate memory for
    // the array of divisors
    int *divisors = new int[n]; 
     // Initialize the count of divisors
    int count = 0;

    for(int i = 1; i <= n; i++) {
        if(n % i == 0) {
            // Add the divisor to the array
            divisors[count++] = i; 
        }
    }
    // Update the size parameter
    // with the count of divisors
    size = count; 
    // Return the array of divisors
    return divisors; 
}

int main() {
    int number = 12;
    int size;
    int *divisors = printDivisors(number, size);

    cout << "Divisors of " << number << " are: ";
    for (int i = 0; i < size; i++) {
        cout << divisors[i] << " ";
    }
    cout << std::endl;

    delete[] divisors;

    return 0;
}
                                
                            
